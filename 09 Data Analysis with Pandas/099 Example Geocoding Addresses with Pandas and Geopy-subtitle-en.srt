0
00:01.730 --> 00:09.770
And yeah, let's close this section on Pandas by looking at a real world example and in this example

1
00:09.790 --> 00:16.790
what we're going to do is we're going to grab the address of each of these rows that we have in the data

2
00:16.790 --> 00:23.100
frame and we're going to convert it to latitude and longitude coordinates.

3
00:23.310 --> 00:31.190
So geographic coordinates in other words. Now addresses they define unique points on the Earth.

4
00:31.190 --> 00:39.230
So if you pass this address to some service lets say you throw it on Google Maps and Google Maps will

5
00:39.410 --> 00:44.260
point to you so it will generate a marker that will tell you where this point is located.

6
00:44.330 --> 00:50.630
Now on the background that marker actually has a pair of latitude and longitude coordinates and

7
00:50.630 --> 00:54.270
every point on Earth has these pair of coordinates.

8
00:54.620 --> 00:59.660
And if you follow the section on building web maps with Folium in the course

9
00:59.690 --> 01:04.440
and you know what this latitude and longitude how
they come in handy

10
01:04.460 --> 01:11.930
when you build applications such as web maps or other maps. Now the process to convert from

11
01:11.930 --> 01:13.710
addresses to coordinates

12
01:13.710 --> 01:15.430
it's called geocoding.

13
01:15.920 --> 01:22.430
And if you want to convert from latitude and longitude to adresses that is called the reverse geocoding.

14
01:22.860 --> 01:26.580
In this lecture how we were going to be looking at geocoding.

15
01:26.600 --> 01:32.740
So basically what we'going to do is we add here a column to the data frame.

16
01:32.780 --> 01:38.030
Actually two columns one for latitude and one for longitude for each of the rows.

17
01:38.330 --> 01:40.760
Now Pandas cannot do that directly.

18
01:40.910 --> 01:41.830
So you need the help

19
01:41.840 --> 01:52.090
of another library that is called Geopy and you can install Geopy with pip, so pip install

20
01:52.440 --> 01:56.760
and Geopy and just wait a while.

21
01:57.430 --> 01:59.980
Oh great.

22
01:59.980 --> 02:08.440
And then you know before going ahead and applying the geocoder to my data defraying values I'd like

23
02:08.440 --> 02:16.450
to actually convert a single address, an address string with geocoder. Something you should be aware of

24
02:16.460 --> 02:18.830
is that to use Geopy,

25
02:18.880 --> 02:27.880
actually to use the geocoder which is you know if you say import Geopy, and then if you say Geopy

26
02:27.880 --> 02:37.610
like that, you'll see that you have a geocoder module among them which is this one here, geocoders

27
02:37.690 --> 02:42.190
actually. And for the geocoders to work

28
02:42.250 --> 02:48.430
You need an internet connection because what geocoders will do it will get your address and then

29
02:48.550 --> 02:56.890
it will send that to an online service that has all of these addresses in a database and then for your

30
02:56.890 --> 03:00.880
address it will calculate the corresponding latitude and longitude.

31
03:01.060 --> 03:11.530
So you need an internet connection and yeah what you normally do is you know you want to import from

32
03:12.060 --> 03:16.160
geopy.geocoders import,

33
03:16.180 --> 03:27.780
actually there are a few geocoders there, but we will use Nominatim which is a tool of Open Street maps and what

34
03:27.830 --> 03:39.060
to do is you know you create a Nominatim variable object so you store that object in a variable. That

35
03:39.070 --> 03:42.890
would be equal to the Nominatim class.

36
03:43.000 --> 03:44.470
So like that.

37
03:45.540 --> 03:50.070
And once you have that object then you pointed to the geocode method

38
03:50.110 --> 03:57.310
of the Nominatim object and you pass an address as a string in there.

39
03:57.730 --> 04:14.620
Lets say 3995, twenty third, and then maybe the city, and the zip code 94114. If you execute that you'll get a location

40
04:15.230 --> 04:16.440
data type.

41
04:16.880 --> 04:22.420
So all these, and all that includes is you know, it includes the address that you passed there.

42
04:22.810 --> 04:31.360
So this one and it has also added United States of America so the country in here, and you also get

43
04:31.360 --> 04:34.480
the latitude and longitude.

44
04:34.570 --> 04:35.820
This one that you just ignore that.

45
04:35.850 --> 04:41.690
It's just a response from the geocoder so it doesn't mean much.

46
04:41.690 --> 04:47.230
Now sometimes though is rare, sometimes you may get a None object.

47
04:47.230 --> 04:55.570
So for instance if you pass this address which probably is not a real address, I'm not sure about that.

48
04:55.570 --> 04:59.380
I don't know, but if you say San Francisco

49
05:02.120 --> 05:13.640
CA for 94119. If you execute that nothing will happen and actually you can see that if you store that in a variable

50
05:14.710 --> 05:23.380
and then print, this will say that it's a None object so it doesn't have anything inside.

51
05:23.380 --> 05:26.250
So yeah be aware of these scenarios as well.

52
05:26.520 --> 05:31.540
And yeah we had our working address, this one here.

53
05:31.980 --> 05:43.570
Let's store that in this variable. And once you have that to extract the latitude and longitude you apply latitude

54
05:43.570 --> 05:54.840
for the latitude value and longitude for the longitude, and that should do it because you know n, type n is

55
05:54.850 --> 05:58.400
a special object it's called a location object of Geopy.

56
05:58.750 --> 06:06.790
So you need to apply those methods and yeah, that's how you convert an address string to a location or to latitude

57
06:06.790 --> 06:07.870
and longitude values.

58
06:08.110 --> 06:17.000
But how about converting an entire column of the data frame into latitude and longitude? So we've got this

59
06:17.000 --> 06:26.800
data frame, df equals to pandas.read.csv.

60
06:27.920 --> 06:30.910
And this should be an underscore.

61
06:31.250 --> 06:37.540
Let me import Pandas first and print out the data frame.

62
06:37.670 --> 06:39.900
So this is our new data frame.

63
06:39.980 --> 06:42.410
Actually this is the old one that we've been using.

64
06:42.530 --> 06:51.950
We have five six addresses there, six rows with an address, city, and state, and country.

65
06:51.950 --> 07:00.770
Now the geocode method more or less it accepts this kind of format, so it expects from you the road name

66
07:00.890 --> 07:08.480
name in here, and then the city, and then the zip code in,  and the country.

67
07:08.480 --> 07:15.720
So what we can do is we need to construct such a column you know different first.

68
07:15.930 --> 07:20.550
Yeah you can either create and you call them or you can add it to an existing one.

69
07:20.630 --> 07:28.790
So let's say I added the address of the existing address code so that it would be able to G.F. address.

70
07:28.790 --> 07:31.310
So there's value in here.

71
07:31.750 --> 07:35.920
Plus I'll need a comment there.

72
07:36.510 --> 07:48.560
So Komal maybe a space plus if City sort of comma between address and city and then another color and

73
07:48.560 --> 07:58.850
then close the it again and yet another Kumo like that.

74
07:59.360 --> 08:06.740
Plus again DMF and a lovely country that's Should duty to.

75
08:09.660 --> 08:14.040
We've got a complete address column in there.

76
08:14.070 --> 08:16.020
Great.

77
08:16.120 --> 08:26.970
Now we need to send this string to the GOP code methods and we need to do it for all the shows.

78
08:27.180 --> 08:34.110
You're probably thinking of its rating but with pandas actually you don't need to iterate Pappas is

79
08:34.110 --> 08:42.810
designed in a way that it allows you it has some Mathilde's that allows you to apply a method or a function

80
08:43.110 --> 08:52.680
to all the rows of defrayed without having to write a formal loop and to do that you know you need to

81
08:52.710 --> 08:59.490
create and you call them let's call it coordinates where you store the stream.

82
09:00.270 --> 09:04.700
You know this stream you service.

83
09:04.790 --> 09:10.570
Actually it's not a stream it's a location object but you get it in your data frame.

84
09:10.570 --> 09:16.960
So we need to store locations for each of the rooms and the way you do that is you know you points to

85
09:17.590 --> 09:27.020
the column that you want to pass to your geocoder and then we use a painless method called applied.

86
09:27.520 --> 09:32.560
So what method do you want to apply to the values of the address column.

87
09:32.770 --> 09:34.050
Well that be.

88
09:34.600 --> 09:49.210
And so and is nominate him object that we have here also creates knowm so SOOOO that it be known that

89
09:49.210 --> 09:55.590
G.O. code is soooo the same as this one.

90
09:57.100 --> 10:03.820
So the joke code but in this case you don't pass is there because of the applying method.

91
10:03.880 --> 10:05.310
It will do it for you.

92
10:05.670 --> 10:12.030
So just like that and then you maybe you print of data or bring in there and see what you get.

93
10:17.220 --> 10:19.440
I got the service timed out.

94
10:19.660 --> 10:21.240
Geocoder is not working probably.

95
10:21.390 --> 10:23.910
Maybe I have a problem with my internet connection.

96
10:23.970 --> 10:27.610
So if you get this long after that is not your fault.

97
10:27.630 --> 10:31.610
A It's always a problem with a geocoder with a pie.

98
10:31.980 --> 10:33.390
I'll try that again.

99
10:36.650 --> 10:38.610
I know this time it works.

100
10:38.720 --> 10:43.550
It was able to fetch the location objects in here.

101
10:43.630 --> 10:45.810
I mean you cannot see the last doing a long.

102
10:46.070 --> 10:48.160
Because it's a long string.

103
10:48.620 --> 10:59.570
But if you do it like that you see you you get the serious four coordinates and your vet is not showing

104
10:59.570 --> 11:00.530
it either.

105
11:01.370 --> 11:09.520
But you can do it's like you know the coordinates and new X is the first item on it like that.

106
11:09.560 --> 11:20.950
And then you get the entire text for the location pure on the latitude you get latitude only that brings

107
11:20.950 --> 11:23.200
us to the point that you may want.

108
11:23.200 --> 11:26.490
Now to add another two columns and you did it for him.

109
11:26.500 --> 11:30.570
I went to fetch the latitude and longitude values.

110
11:30.850 --> 11:33.330
So all the different frame is this one.

111
11:33.940 --> 11:34.950
At the moment.

112
11:35.590 --> 11:45.700
What you can do is you know you could create a letter to call them that would be called The F coordinates

113
11:47.300 --> 11:49.160
ploy.

114
11:50.450 --> 11:53.930
You know you cannot apply latitude directly

115
11:56.590 --> 12:01.820
because you get this kind of error that say Sirius has no latitude.

116
12:01.900 --> 12:08.760
So you're applying a latitude method to a serious but a series doesn't recognize that we're serious

117
12:08.760 --> 12:09.840
to recognize.

118
12:09.860 --> 12:12.170
So they apply methods.

119
12:12.530 --> 12:20.440
So you can write your other methods now all latitude will point to the two values.

120
12:20.440 --> 12:29.470
All of these coordinates column and in the scenario you use you use a lambda function.

121
12:29.470 --> 12:33.430
So which is an inline method to be of the function.

122
12:33.880 --> 12:43.870
So you say lambda x x is a temporary variable then you say X latitude I know let's keep it like that

123
12:43.870 --> 12:45.420
for for now.

124
12:45.900 --> 12:46.250
Yes.

125
12:46.290 --> 12:50.090
There let's see what we've got.

126
12:50.740 --> 12:55.220
Well it's so that's a non type object has no attributes latitude.

127
12:55.520 --> 13:00.450
So this can be quite tricky if you're not experienced with geocoding.

128
13:00.470 --> 13:10.060
Another reason we get this is that we have a known row value in there among our rows of our row which

129
13:10.080 --> 13:18.730
is not a location data type and does not have a latitude Meffert because you know what we did here is

130
13:18.880 --> 13:21.130
we are storing all these values.

131
13:21.220 --> 13:22.780
So it is like a loop.

132
13:22.930 --> 13:29.980
We are storing all these values in the temporary x variable and for each of these value we apply velocity.

133
13:30.190 --> 13:37.930
So what point on we'll do is it will go through the first row and it will apply the latitude to the

134
13:37.930 --> 13:43.900
first row and it is sorted in the latitudes column and then it goes to the second value.

135
13:43.900 --> 13:46.900
But in this value latitude does not exist for now.

136
13:47.050 --> 14:02.070
So you get an error that you could apply conditional and in line if conditional You say X is not tails.

137
14:02.620 --> 14:11.120
And I know it's a bit confusing but what we did is you know poor Let's do if x is not None.

138
14:11.620 --> 14:21.160
So it will apply this method for sorrow's for those values otherwise it will store none either current

139
14:21.340 --> 14:23.630
cell or the latitudes colon.

140
14:24.340 --> 14:25.980
So that is clear.

141
14:26.110 --> 14:28.020
I'll ask you here.

142
14:28.850 --> 14:32.360
Yeah you got the latitude to call them in there.

143
14:32.740 --> 14:33.570
Great.

144
14:33.880 --> 14:36.930
And we can do the same for all longer tudes

145
14:39.700 --> 14:43.830
along with tudes and here as well.

146
14:47.080 --> 14:48.050
That was quick.

147
14:48.510 --> 14:52.540
And you know that's it I think you have a lot to do and longer to call them in your data.

148
14:52.940 --> 14:59.380
So please have a second look at what I wrote in here and if there is something that doesn't make sense

149
14:59.390 --> 15:02.820
just drop a question and I'll be happy to answer you.

150
15:03.140 --> 15:07.130
So yeah we have quite a lot of flexibility working with data frames.

151
15:07.940 --> 15:09.520
I hope you enjoy this.

152
15:09.650 --> 15:11.780
I'll talk to either next lunchers.

153
15:12.010 --> 15:12.350
So you.